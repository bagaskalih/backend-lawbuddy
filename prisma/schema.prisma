// This is the schema.prisma file for our database

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User model for both regular users and counselors
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // lawyer specific fields
  field           String?
  experienceYears Int?       @default(0)
  rating          Float?     @default(0.0)
  price           Int?       @default(0)
  reservedDates   DateTime[] @default([])

  // Relations
  accounts      Account[]
  sessions      Session[]
  sentChats     Chat[]    @relation("Sender")
  receivedChats Chat[]    @relation("Receiver")
  Message       Message[]
  Artikel       Artikel[]
  Comment       Comment[]
}

enum UserRole {
  USER
  LAWYER
  ADMIN
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Chat models
model Chat {
  id          String   @id @default(cuid())
  senderId    String?
  receiverId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sender   User?      @relation("Sender", fields: [senderId], references: [id], onDelete: SetNull)
  receiver User?      @relation("Receiver", fields: [receiverId], references: [id], onDelete: SetNull)
  messages Message[]
}


model Message {
  id        String   @id @default(cuid())
  chatId    String
  content   String
  senderId  String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  chat   Chat  @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender User? @relation(fields: [senderId], references: [id], onDelete: SetNull)
}

// ARTIKEL
model Artikel {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     String   @db.Text
  category    String?
  authorId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  author  User?     @relation(fields: [authorId], references: [id], onDelete: SetNull)
  Comment Comment[]
}

// COMMENT
model Comment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  artikelId String
  name      String?
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artikel Artikel @relation(fields: [artikelId], references: [id], onDelete: Cascade)
  author  User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
}
